/*
	Adjacency Matrix for Directed and Unweighted graph
*/

public class DirectedUnweightedGraph{
	private static int v;
	private static int[][] adjacencyMatrix;

	// Constructor to intialize the graph
	 DirectedUnweightedGraph(int vertices){
	 	this.v=vertices;
	 	adjacencyMatrix = new int[v][v];
	 }

	 // function to add an edge from vertex v1 to vertex v2
	 public static void addEdges(int v1, int v2){
	 	adjacencyMatrix[v1][v2]=1;
	 	// Since it's a directed graph, we only set one direction
	 }

	 // function to display the adjacency matrix
	 public static void display(){
	 	for(int i=0;i<v;i++){
	 		for(int j=0;j<v;j++){
	 			System.out.print(adjacencyMatrix[i][j]+" ");
	 		}
	 		System.out.println();
	 	}
	 }

	 // main function
	 public static void main(String[] args){
	 	DirectedUnweightedGraph graph = new DirectedUnweightedGraph(5);
	 	graph.addEdges(0,1);
	 	graph.addEdges(0,3);
	 	graph.addEdges(0,4);
	 	graph.addEdges(1,1);
	 	graph.addEdges(1,0);
	 	graph.addEdges(1,4);
	 	graph.addEdges(2,2);
	 	graph.addEdges(3,2);
	 	graph.addEdges(4,3);

	 	graph.display();
	 }
}

/*

Time complexity : 

Adding an Edge -
The addEdge method updates one element in the adjacency matrix.
Each update operation is O(1).

Displaying the Adjacency Matrix -
The display method involves iterating over all V^2 elements of the matrix and printing them.
The nested loops iterate V times each, resulting in V^2 iterations.

addEdge method: O(1)
display method: O(V^2)

Space Complexity :
The space complexity of the graph representation using an adjacency matrix is determined by the storage requirements of the matrix itself.

The adjacency matrix is a 2D array of size VÃ—V, where V is the number of vertices in the graph.
Each element in the matrix is an integer (0 or 1), representing the presence or absence of a directed edge between two vertices.

space complexity - O(V^2)

*/
